Abstraction and reprtition in Programming
  [Loops] is a method that allows then coder to use one line many times over.
  
  10.times do 
  puts "Hi! Welcome to my very repetitive program"
end

Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
Hi! Welcome to my very repetitive program
# => 10 

# the [loop] keyword:

  loop do
    puts "I have found the Time Machine!"
  end
  
  This will create a infinite loop, to break this loop, I need to press Control + C

# Stop looping with [break] and counters:
  
  loop do
    puts "You'll see this exactly once."
    break # Exit the Loop
  end
 
  puts "And the Loop is Done"
  
__________________________  
  counter = 0 # Start our counter at 0, we have never run the loop
loop do # Start our loop
  # increment our counter by 1 and set it equal to the sum of its current value, plus 1. 
  counter = counter + 1
 
  # Do Something
  puts "Iteration #{counter} of the loop"
 
  if counter >= 10 # If our counter is 10 or more
    break # Stop the loop
  end
end
_______________________________________________________________
# Advanced: The Add-and- Assignment (or Plus-Equals) Operator:
  age = 7
  age += 1
  age #=> 8 # this is the same as age = age + 1
  
  When we use [+=], this is called incrementing.
  
  counter = 0
 
loop do 
  counter += 1
  puts "Iteration #{counter} of the loop"
  if counter >= 10 
    break
  end
end